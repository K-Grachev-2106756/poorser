#include<iostream>
#include<string>


/**
 *  ласс, реализованный исключительно
 * дл€ взаимодействи€ с пользователем
 * посредством настройки, как должны
 * быть отсортированы данные и с какой
 * периодичностью они должны выводитьс€
 * в консоль
 */
class client {
public:
	/**
	 * ”молчательный конструктор
	 */
	client() = default;
	/**
	 * ћетод класса Client, который осуществл€ет
	 * непосредственное взаимодействие с пользователем
	 * и предоставл€ет ему данные в том виде, в
	 * котором он хочет их видеть.
	 */
	void interact();
	/**
	 * ”молчательный деструктор
	 */
	~client() = default;

private:
	/**
	 * ѕоле std::string menu используетс€ исключительно дл€ взаимодействи€ с пользователем
	 */
	std::string menu = "¬ыберите действие:\n\t1.¬ыбрать способ сортировки.\n\t2.«адать период обновлени€ данных.\n\t3.ѕолучить данные.\n";
	/**
	 * ѕоле std::string sorts используетс€ исключительно дл€ взаимодействи€ с пользователем
	 */
	std::string sorts = "¬ыберите сортировку:\n\t1.ѕо цене.\n\t2.ѕо скидке.\n\t3.¬ернутьс€ в главное меню.\n";
	/**
	 * ѕоле std::string periods_ используетс€ исключительно дл€ взаимодействи€ с пользователем
	 */
	std::string periods_ = "¬ведите врем€ в минутах или введите 0 дл€ возврата в главное меню.\n";
	/**
	 * ѕоле std::string sort используетс€ дл€ корректного отображени€ данных, запрошенных пользователем
	 */
	std::string sort = "";
	/**
	 *  ѕоле uint8_t period используетс€ дл€ корректного отображени€ данных, запрошенных пользователем
	 */
	uint8_t period = 0;
	/**
	 * ћетод класса Client, который вызываетс€ дл€ получени€ актуальных данных
	 */
	void show_data();
};
